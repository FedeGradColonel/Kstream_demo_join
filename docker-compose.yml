#Use to run application on local machine
version: '1.0'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.3
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  fhir-api:
    image: "mcr.microsoft.com/healthcareapis/r4-fhir-server"
    # Use the image below Mac M2 but do not commit!
    #image: "mcr.microsoft.com/dotnet/sdk-arm:7.0.400-alpine3.17"
    restart: on-failure
    environment:
      FHIRServer__Security__Enabled: "false"
      SqlServer__ConnectionString: "Server=tcp:sql,1433;Initial Catalog=FHIR;Persist Security Info=False;User ID=sa;Password=Ba7SQLServer;MultipleActiveResultSets=False;Connection Timeout=30;TrustServerCertificate=true;"
      SqlServer__AllowDatabaseCreation: "true"
      SqlServer__Initialize: "true"
      SqlServer__SchemaOptions__AutomaticUpdatesEnabled: "true"
      DataStore: "SqlServer"
    depends_on:
      - sql
    ports:
      - "8080:8080"

  sql:
    image: "mcr.microsoft.com/mssql/server"
    environment:
      SA_PASSWORD: "Ba7SQLServer"
      ACCEPT_EULA: "Y"
    healthcheck:
      test: [ "CMD", "/opt/mssql-tools/bin/sqlcmd","-U sa -P Ba7SQLServer -Q 'SELECT * FROM INFORMATION_SCHEMA.TABLES'" ]
      interval: 10s
      timeout: 10s
      retries: 6

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      declare -a topics=(
                  "DEV.Appointment"
                  "DEV.Practitioner"
                   )

      for i in "$${topics[@]}"
      do
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic $$i --replication-factor 1 --partitions 1
      done

      echo -e 'Existing topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "

volumes:
  redis:
    driver: local

networks:
  redis-network:
    driver: bridge
